there are an frog siting on the stair he want to come at the 0th stair you have to tell the minimum energy he needds to take to achive this task 

plain recursions 

int frogjump(vector<int> &power,int n){
    if(n<=0) return 0;
    int l = frogjump(power,n-1)+abs(power[n]-power[n-1]);
    int r = INT_MAX;
    if(n>1) r = frogjump(power,n-2)+abs(power[n]-power[n-2]);
    return min(l,r);        
}

int main() {
   vector<int> po = {30,10,60,10,60,50};        
   int n = po.size();   
   cout<<frogjump(po,n-1);
   return 0;
}

memoization 


int frogjump(vector<int> &power,int n,vector<int> &dp){
    if(n<=0) return 0;
    if(dp[n]!=-1) return dp[n];
    int l = frogjump(power,n-1,dp)+abs(power[n]-power[n-1]);
    int r = INT_MAX;
    if(n>1) r = frogjump(power,n-2,dp)+abs(power[n]-power[n-2]);
    return dp[n] = min(l,r);        
}

int main() {
   vector<int> po = {30,10,60,10,60,50};        
   int n = po.size();
   vector<int> dp(n,-1);
   cout<<frogjump(po,n-1,dp);
   return 0;
}



Tabulation

int main() {
   vector<int> po = {30,10,60,10,60,50};        
   int n = po.size();
   vector<int> dp(n,0);
   dp[0] = 0;
   for(int i = 1;i<n;i++){
       int l = dp[i-1] + abs(po[i]-po[i-1]);
       int r = INT_MAX;
       if(i>1) r = dp[i-2] + abs(po[i]-po[i-2]);
       dp[i] = min(l,r);
   }
   cout<<dp[n-1];
   return 0;
}
