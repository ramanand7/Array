1 3 2 4 5 1 

ans = 8 

two paths are there 1 ---> 1 4 3 = 8 
                    2 ---> 5 3 1 = 8 
       
       
take not take will generate all the required path and from that take your optimal path at each step 

Plain Recursion

int msum(int i,vector<int> &v){
    if(i==0) return v[0];
    if(i<0) return 0;
    int nt = msum(i-1,v);
    int tak = msum(i-2,v)+v[i];
    
    return max(tak,nt);
}

int main() {
   vector<int> v = {1,3,2,4,5,1};
   int n = v.size();
   cout<<msum(n-1,v);
}


Memoization


int msum(int i,vector<int> &v,vector<int> &dp){
    if(i==0) return v[0];
    if(i<0) return 0;
    if(dp[i] != -1 ) return dp[i];
    int nt = msum(i-1,v,dp);
    int tak = msum(i-2,v,dp)+v[i];
    
    return dp[i] = max(tak,nt);
}

int main() {
   vector<int> v = {1,3,2,4,5,1};
   int n = v.size();
   vector<int> dp(n,-1);
   cout<<msum(n-1,v,dp);
}


Tabulation 

int main() {
   vector<int> v = {1,3,2,4,5,1};
   int n = v.size();
   vector<int> dp(n,0);
   dp[0] = v[0];
   for(int i = 1;i<n;i++){
       int nt = dp[i-1]+0;
       int tk = v[i];
       if(i>1) tk+=dp[i-2];
       dp[i] = max(tk,nt);
   }
   cout<<dp[n-1];
   return 0;
}
